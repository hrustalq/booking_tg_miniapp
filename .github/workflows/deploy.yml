name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: 'production' 
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add VPS to known hosts
        run: ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      # Ensure the application directory exists
      - name: Ensure app directory exists
        run: |
          ssh root@${{ secrets.SERVER_IP }} '
          if [ ! -d "/usr/apps/booking_tg_miniapp" ]; then
            mkdir -p /usr/apps/booking_tg_miniapp;
          fi
          '

      # Check if the repo is cloned, clone if not
      - name: Ensure repository is cloned
        run: |
          ssh root@${{ secrets.SERVER_IP }} '
          if [ ! -d "/usr/apps/booking_tg_miniapp/.git" ]; then
            git clone https://github.com/your-username/your-repo.git /usr/apps/booking_tg_miniapp;
          fi
          '

      - name: Pull latest code
        run: ssh root@${{ secrets.SERVER_IP }} 'cd /usr/apps/booking_tg_miniapp && git pull origin main'

      # Install Docker if not installed
      - name: Install Docker
        run: |
          ssh root@${{ secrets.SERVER_IP }} '
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh &&
            sh get-docker.sh &&
            rm get-docker.sh;
          fi
          '

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with: 
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Create SSL certificate files
        run: |
          ssh root@${{ secrets.SERVER_IP }} '
          echo "${{ secrets.SSL_CERT }}" > /usr/apps/booking_tg_miniapp/nginx/cert.pem &&
          echo "${{ secrets.SSL_PRIVATE_KEY }}" > /usr/apps/booking_tg_miniapp/nginx/key.pem &&
          chmod 600 /usr/apps/booking_tg_miniapp/nginx/cert.pem /usr/apps/booking_tg_miniapp/nginx/key.pem
          '

      - name: Update API .env file
        run: |
          ssh root@${{ secrets.SERVER_IP }} '
          echo "DATABASE_URL=\"${{ secrets.DATABASE_URL }}\"" > /usr/apps/booking_tg_miniapp/apps/api/.env
          '

      - name: Deploy
        run: ssh root@${{ secrets.SERVER_IP }} 'cd /usr/apps/booking_tg_miniapp && make build && make up'