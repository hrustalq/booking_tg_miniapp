model Payment {
  id String @id @default(cuid())

  amount  Float
  status  PaymentStatus

  senderCredentials   PaymentCredentials? @relation("SenderPayment", fields: [senderCredentialsId], references: [id])
  senderCredentialsId Int?
  receiverCredentials PaymentCredentials? @relation("ReceiverPayment", fields: [receiverCredentialsId], references: [id])
  receiverCredentialsId Int?

  sender   TelegramUser @relation("SenderPayment", fields: [senderId], references: [id])
  senderId Int

  receiver TelegramUser @relation("ReceiverPayment", fields: [receiverId], references: [id])
  receiverId Int

  booking Booking?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model PaymentCredentials {
  id Int @id @default(autoincrement())

  cardNumber        String
  cardHolderName    String
  cardHolderSurname String

  user   TelegramUser @relation(fields: [userId], references: [id])
  userId Int

  // Add relations to Payment
  senderPayments   Payment[] @relation("SenderPayment")
  receiverPayments Payment[] @relation("ReceiverPayment")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
